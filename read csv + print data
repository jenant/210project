use std::collections::HashMap;
use std::error::Error;
use std::fs::File;
use std::path::Path;
use csv::ReaderBuilder;

struct Data {
    data_map: HashMap<String, Vec<String>>,
}

impl Data {
    fn read_csv(file_path: &str) -> Result<Self, Box<dyn Error>> {
        let file = File::open(file_path)?;
        let mut rdr = ReaderBuilder::new()
            .has_headers(true)
            .from_reader(file);

        let mut data_map: HashMap<String, Vec<String>> = HashMap::new();
        let keys = vec!["subject_race", "subject_age", "subject_sex", "arrest_made", "search_conducted"];

        let headers: Vec<String> = rdr.headers()?
            .iter()
            .map(|h| h.to_string())
            .collect();

        for key in &keys {
            if !headers.contains(&key.to_string()) {
            }
            data_map.insert(key.to_string(), Vec::new());
        }

        for result in rdr.records() {
            let record = result?;
            for key in &keys {
                if let Some(index) = headers.iter().position(|h| h == *key) {
                    if let Some(value) = record.get(index) {
                        data_map.get_mut(*key).unwrap().push(value.to_string());
                    }
                } else {
                    data_map.get_mut(*key).unwrap().push("N/A".to_string());
                }
            }
        }

        Ok(Data {data_map})
    }

    fn print_table(&self) {
        let keys: Vec<&String> = self.data_map.keys().collect();
        let num_rows = self.data_map.values().next().map_or(0, |v| v.len());

        for key in &keys {
            print!("{:^15}|", key);
        }
        println!();
        println!("{}", "-".repeat(16 * keys.len()));

        for i in 0..num_rows.min(20) {
            for key in &keys {
                if let Some(value) = self.data_map.get(*key).and_then(|v| v.get(i)) {
                    print!("{:^15}|", value);
                } else {
                    print!("{:^15}|", "N/A");
                }
            }
            println!();
        }
    }

    fn count_arrests_and_searches_by_race(&self) -> HashMap<String, (usize, usize)> {
        let mut race_count: HashMap<String, (usize, usize)> = HashMap::new();

        let arrest_made_index = self.data_map.get("arrest_made").unwrap();
        let search_conducted_index = self.data_map.get("search_conducted").unwrap();
        let race_index = self.data_map.get("subject_race").unwrap();

        for i in 0..arrest_made_index.len() {
            let race = race_index[i].trim().to_lowercase();
            let arrest_made = arrest_made_index[i].trim().to_lowercase();
            let search_conducted = search_conducted_index[i].trim().to_lowercase();

            race_count.entry(race.clone()).or_insert((0, 0));

            if arrest_made == "true" {
                let (arrests, searches) = race_count.entry(race.clone()).or_insert((0, 0));
                *arrests += 1;
            }
            if search_conducted == "true" {
                let (arrests, searches) = race_count.entry(race.clone()).or_insert((0, 0));
                *searches += 1;
            }
        }

        race_count
    }

    fn race_ratio(&self, race_count: &HashMap<String, (usize, usize)>) -> HashMap<String, (f64, f64)> {
        let mut race_ratio: HashMap<String, (f64, f64)> = HashMap::new();

        if let Some(white_count) = race_count.get("white") {
            let (white_arrests, white_searches) = *white_count;

            for (race, &(arrests, searches)) in race_count {
                let arrest_ratio = if white_arrests > 0 {
                    arrests as f64 / white_arrests as f64
                } else {
                    0.0
                };

                let search_ratio = if white_searches > 0 {
                    searches as f64 / white_searches as f64
                } else {
                    0.0
                };

                race_ratio.insert(race.clone(), (arrest_ratio, search_ratio));
            }
        }

        race_ratio
    }

    fn arrests_and_searches_by_race(&self, race_count: &HashMap<String, (usize, usize)>) {
        println!("{:<25} | {:<10} | {:<10}", "Race", "Arrests", "Searches");
        println!("{}", "-".repeat(50));

        for (race, &(arrests, searches)) in race_count {
            println!("{:<25} | {:<10} | {:<10}", race, arrests, searches);
        }
    }

    fn print_race_ratios(&self, race_ratio: &HashMap<String, (f64, f64)>) {
        println!("{:<25} | {:<20} | {:<20}", "Race", "Arrest Ratio to White", "Search Ratio to White");
        println!("{}", "-".repeat(65));

        for (race, &(arrest_ratio, search_ratio)) in race_ratio {
            println!("{:<25} | {:<20.2} | {:<20.2}", race, arrest_ratio, search_ratio);
        }
    }

    fn gender_ratio(&self) -> (usize, usize, f64) {
        let sex_index = self.data_map.get("subject_sex").unwrap();

        let mut male_count = 0;
        let mut female_count = 0;

        for sex in sex_index {
            match sex.trim().to_lowercase().as_str() {
                "male" => male_count += 1,
                "female" => female_count += 1,
                _ => {}
            }
        }

        let male_to_female_ratio = if female_count > 0 {
            male_count as f64 / female_count as f64
        } else {
            0.0
        };

        (male_count, female_count, male_to_female_ratio)
    }
  }
fn main() -> Result<(), Box<dyn Error>> {
    let file_path = "/Users/jenantaibah/Desktop/BU/Fall24/DS210/project/ri_statewide_2020_04_01.csv";
    match Data::read_csv(file_path) {
        Ok(data) => {
            data.print_table();

            let race_count = data.count_arrests_and_searches_by_race();
            let race_ratio = data.race_ratio(&race_count);

            println!();
            data.arrests_and_searches_by_race(&race_count);

            println!();
            data.print_race_ratios(&race_ratio);

            let (male_count, female_count, male_to_female_ratio) = data.gender_ratio();

            println!();
            println!("Number of Males: {}", male_count);
            println!("Number of Females: {}", female_count);
            println!("Male to Female Ratio: {:.2}", male_to_female_ratio);
        }
        Err(e) => {
            eprintln!("Error reading CSV file: {}", e);
        }
    }

    Ok(())
}

